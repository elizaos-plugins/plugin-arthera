{"version":3,"sources":["../src/types/index.ts","../src/actions/transfer.ts","../src/providers/wallet.ts","../src/templates/index.ts","../src/index.ts"],"sourcesContent":["import type {\n    Account,\n    Address,\n    Chain,\n    Hash,\n    HttpTransport,\n    PublicClient,\n    WalletClient,\n} from \"viem\";\nimport * as viemChains from \"viem/chains\";\n\nconst _SupportedChainList = Object.keys(viemChains) as Array<\n    keyof typeof viemChains\n>;\nexport type SupportedChain = (typeof _SupportedChainList)[number];\n\n// Transaction types\nexport interface Transaction {\n    hash: Hash;\n    from: Address;\n    to: Address;\n    value: bigint;\n    data?: `0x${string}`;\n    chainId?: number;\n}\n\n// Chain configuration\nexport interface ChainMetadata {\n    chainId: number;\n    name: string;\n    chain: Chain;\n    rpcUrl: string;\n    nativeCurrency: {\n        name: string;\n        symbol: string;\n        decimals: number;\n    };\n    blockExplorerUrl: string;\n}\n\nexport interface ChainConfig {\n    chain: Chain;\n    publicClient: PublicClient<HttpTransport, Chain, Account | undefined>;\n    walletClient?: WalletClient;\n}\n\n// Action parameters\nexport interface TransferParams {\n    fromChain: SupportedChain;\n    toAddress: Address;\n    amount: string;\n    data?: `0x${string}`;\n}\n\n// Plugin configuration\nexport interface ArtheraPluginConfig {\n    rpcUrl?: {\n        arthera?: string;\n    };\n    secrets?: {\n        ARTHERA_PRIVATE_KEY: string;\n    };\n    testMode?: boolean;\n    multicall?: {\n        batchSize?: number;\n        wait?: number;\n    };\n}\n\nexport interface ProviderError extends Error {\n    code?: number;\n    data?: unknown;\n}\n","import { type ByteArray, formatEther, parseEther, type Hex } from \"viem\";\nimport {\n    composeContext,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\n\nimport { initWalletProvider, type WalletProvider } from \"../providers/wallet\";\nimport type { Transaction, TransferParams } from \"../types\";\nimport { transferTemplate } from \"../templates\";\n\nexport { transferTemplate };\n\n// Exported for tests\nexport class TransferAction {\n    constructor(private walletProvider: WalletProvider) {}\n\n    async transfer(params: TransferParams): Promise<Transaction> {\n        const walletClient = this.walletProvider.getWalletClient(\n            params.fromChain\n        );\n\n        console.log(\n            `Transferring: ${params.amount} tokens from (${walletClient.account.address} to (${params.toAddress} on ${params.fromChain})`\n        );\n\n        if (!params.data) {\n            params.data = \"0x\";\n        }\n\n        try {\n            const hash = await walletClient.sendTransaction({\n                account: walletClient.account,\n                to: params.toAddress,\n                value: parseEther(params.amount),\n                data: params.data as Hex,\n                kzg: {\n                    blobToKzgCommitment: (_: ByteArray): ByteArray => {\n                        throw new Error(\"Function not implemented.\");\n                    },\n                    computeBlobKzgProof: (\n                        _blob: ByteArray,\n                        _commitment: ByteArray\n                    ): ByteArray => {\n                        throw new Error(\"Function not implemented.\");\n                    },\n                },\n                chain: undefined,\n            });\n\n            return {\n                hash,\n                from: walletClient.account.address,\n                to: params.toAddress,\n                value: parseEther(params.amount),\n                data: params.data as Hex,\n            };\n        } catch (error) {\n            throw new Error(`Transfer failed: ${error.message}`);\n        }\n    }\n}\n\nconst buildTransferDetails = async (\n    state: State,\n    runtime: IAgentRuntime,\n    wp: WalletProvider\n): Promise<TransferParams> => {\n    const context = composeContext({\n        state,\n        template: transferTemplate,\n    });\n\n    const chains = Object.keys(wp.chains);\n\n    const contextWithChains = context.replace(\n        \"SUPPORTED_CHAINS\",\n        chains.map((item) => `\"${item}\"`).join(\"|\")\n    );\n\n    const transferDetails = (await generateObjectDeprecated({\n        runtime,\n        context: contextWithChains,\n        modelClass: ModelClass.SMALL,\n    })) as TransferParams;\n\n    const existingChain = wp.chains[transferDetails.fromChain];\n\n    if (!existingChain) {\n        throw new Error(\n            `The chain ${transferDetails.fromChain} not configured yet. Add the chain or choose one from configured: ${chains.toString()}`\n        );\n    }\n\n    return transferDetails;\n};\n\nexport const transferAction = {\n    name: \"transfer\",\n    description: \"Transfer tokens between addresses on the same chain\",\n    handler: async (\n        runtime: IAgentRuntime,\n        _message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ) => {\n        console.log(\"Transfer action handler called\");\n        const walletProvider = initWalletProvider(runtime);\n        const action = new TransferAction(walletProvider);\n\n        // Compose transfer context\n        const paramOptions = await buildTransferDetails(\n            state,\n            runtime,\n            walletProvider\n        );\n\n        try {\n            const transferResp = await action.transfer(paramOptions);\n            if (callback) {\n                callback({\n                    text: `Successfully transferred ${paramOptions.amount} tokens to ${paramOptions.toAddress}\\nTransaction Hash: ${transferResp.hash}`,\n                    content: {\n                        success: true,\n                        hash: transferResp.hash,\n                        amount: formatEther(transferResp.value),\n                        recipient: transferResp.to,\n                        chain: paramOptions.fromChain,\n                    },\n                });\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Error during token transfer:\", error);\n            if (callback) {\n                callback({\n                    text: `Error transferring tokens: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n    template: transferTemplate,\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"ARTHERA_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: [\n        [\n            {\n                user: \"assistant\",\n                content: {\n                    text: \"I'll help you transfer 1 AA to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                    action: \"SEND_TOKENS\",\n                },\n            },\n            {\n                user: \"user\",\n                content: {\n                    text: \"Transfer 1 AA to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                    action: \"SEND_TOKENS\",\n                },\n            },\n        ],\n    ],\n    similes: [\"SEND_TOKENS\", \"TOKEN_TRANSFER\", \"MOVE_TOKENS\"],\n};\n","import {\n    createPublicClient,\n    createWalletClient,\n    formatUnits,\n    http,\n} from \"viem\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport type { IAgentRuntime, Provider, Memory, State } from \"@elizaos/core\";\nimport type {\n    Address,\n    WalletClient,\n    PublicClient,\n    Chain,\n    HttpTransport,\n    Account,\n    PrivateKeyAccount,\n} from \"viem\";\nimport * as viemChains from \"viem/chains\";\n\nimport type { SupportedChain } from \"../types\";\n\nexport class WalletProvider {\n    private currentChain: SupportedChain = \"arthera\";\n    chains: Record<string, Chain> = { arthera: viemChains.arthera };\n    account: PrivateKeyAccount;\n\n    constructor(privateKey: `0x${string}`, chains?: Record<string, Chain>) {\n        this.setAccount(privateKey);\n        this.setChains(chains);\n\n        if (chains && Object.keys(chains).length > 0) {\n            this.setCurrentChain(Object.keys(chains)[0] as SupportedChain);\n        }\n    }\n\n    getAddress(): Address {\n        return this.account.address;\n    }\n\n    getCurrentChain(): Chain {\n        return this.chains[this.currentChain];\n    }\n\n    getPublicClient(\n        chainName: SupportedChain\n    ): PublicClient<HttpTransport, Chain, Account | undefined> {\n        const transport = this.createHttpTransport(chainName);\n\n        const publicClient = createPublicClient({\n            chain: this.chains[chainName],\n            transport,\n        });\n        return publicClient;\n    }\n\n    getWalletClient(chainName: SupportedChain): WalletClient {\n        const transport = this.createHttpTransport(chainName);\n\n        const walletClient = createWalletClient({\n            chain: this.chains[chainName],\n            transport,\n            account: this.account,\n        });\n\n        return walletClient;\n    }\n\n    getChainConfigs(chainName: SupportedChain): Chain {\n        const chain = viemChains[chainName];\n\n        if (!chain?.id) {\n            throw new Error(\"Invalid chain name\");\n        }\n\n        return chain;\n    }\n\n    async getWalletBalance(): Promise<string | null> {\n        try {\n            const client = this.getPublicClient(this.currentChain);\n            const balance = await client.getBalance({\n                address: this.account.address,\n            });\n            return formatUnits(balance, 18);\n        } catch (error) {\n            console.error(\"Error getting wallet balance:\", error);\n            return null;\n        }\n    }\n\n    async getWalletBalanceForChain(\n        chainName: SupportedChain\n    ): Promise<string | null> {\n        try {\n            const client = this.getPublicClient(chainName);\n            const balance = await client.getBalance({\n                address: this.account.address,\n            });\n            return formatUnits(balance, 18);\n        } catch (error) {\n            console.error(\"Error getting wallet balance:\", error);\n            return null;\n        }\n    }\n\n    private setAccount = (pk: `0x${string}`) => {\n        this.account = privateKeyToAccount(pk);\n    };\n\n    private setChains = (chains?: Record<string, Chain>) => {\n        if (!chains) {\n            return;\n        }\n        for (const chain of Object.keys(chains)) {\n            this.chains[chain] = chains[chain];\n        }\n    };\n\n    private setCurrentChain = (chain: SupportedChain) => {\n        this.currentChain = chain;\n    };\n\n    private createHttpTransport = (chainName: SupportedChain) => {\n        const chain = this.chains[chainName];\n\n        if (chain.rpcUrls.custom) {\n            return http(chain.rpcUrls.custom.http[0]);\n        }\n        return http(chain.rpcUrls.default.http[0]);\n    };\n\n    static genChainFromName(\n        chainName: string,\n        customRpcUrl?: string | null\n    ): Chain {\n        const baseChain = viemChains[chainName];\n\n        if (!baseChain?.id) {\n            throw new Error(\"Invalid chain name\");\n        }\n\n        const viemChain: Chain = customRpcUrl\n            ? {\n                  ...baseChain,\n                  rpcUrls: {\n                      ...baseChain.rpcUrls,\n                      custom: {\n                          http: [customRpcUrl],\n                      },\n                  },\n              }\n            : baseChain;\n\n        return viemChain;\n    }\n}\n\nconst genChainsFromRuntime = (\n    runtime: IAgentRuntime\n): Record<string, Chain> => {\n    const chainNames = [\"arthera\"];\n    const chains = {};\n\n    for (const chainName of chainNames) {\n        const rpcUrl = runtime.getSetting(\n            `ETHEREUM_PROVIDER_${chainName.toUpperCase()}`\n        );\n        const chain = WalletProvider.genChainFromName(chainName, rpcUrl);\n        chains[chainName] = chain;\n    }\n\n    return chains;\n};\n\nexport const initWalletProvider = (runtime: IAgentRuntime) => {\n    const privateKey = runtime.getSetting(\"ARTHERA_PRIVATE_KEY\");\n    if (!privateKey) {\n        throw new Error(\"ARTHERA_PRIVATE_KEY is missing\");\n    }\n\n    const chains = genChainsFromRuntime(runtime);\n\n    return new WalletProvider(privateKey as `0x${string}`, chains);\n};\n\nexport const artheraWalletProvider: Provider = {\n    async get(\n        runtime: IAgentRuntime,\n        _message: Memory,\n        _state?: State\n    ): Promise<string | null> {\n        try {\n            const walletProvider = initWalletProvider(runtime);\n            const address = walletProvider.getAddress();\n            const balance = await walletProvider.getWalletBalance();\n            const chain = walletProvider.getCurrentChain();\n            return `Arthera Wallet Address: ${address}\\nBalance: ${balance} ${chain.nativeCurrency.symbol}\\nChain ID: ${chain.id}, Name: ${chain.name}`;\n        } catch (error) {\n            console.error(\"Error in Arthera wallet provider:\", error);\n            return null;\n        }\n    },\n};\n","export const transferTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested transfer:\n- Chain to execute on: Must be one of [\"arthera\", \"base\", ...] (like in viem/chains)\n- Amount to transfer: Must be a string representing the amount in AA (only number without coin symbol, e.g., \"0.1\")\n- Recipient address: Must be a valid Arthera address starting with \"0x\"\n- Token symbol or address (if not native token): Optional, leave as null for AA transfers\n\nRespond with a JSON markdown block containing only the extracted values. All fields except 'token' are required:\n\n\\`\\`\\`json\n{\n    \"fromChain\": SUPPORTED_CHAINS,\n    \"amount\": string,\n    \"toAddress\": string,\n    \"token\": string | null\n}\n\\`\\`\\`\n`;\n","export * from \"./types\";\n\nimport { transferAction } from \"./actions/transfer\";\nimport { artheraWalletProvider } from \"./providers/wallet\";\n\nexport const artheraPlugin = {\n    name: \"arthera\",\n    description: \"Arthera blockchain integration plugin\",\n    providers: [artheraWalletProvider],\n    evaluators: [],\n    services: [],\n    actions: [transferAction],\n};\n\nexport default artheraPlugin;\n"],"mappings":"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","names":["viemChains"]}